name: gitops-CI

on: 
  push:
    branches:
      - main
  pull_request:
  # manual trigger
  workflow_dispatch:

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.57
          working-directory: ./backend
  
  build-and-test:
    name: build-and-test
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: check out code
        uses: actions/checkout@v2

      - name: Create .env file
        uses: ozaytsev86/create-env-file@v1
        with:
          ENV_POSTGRES_HOST: postgresdb
          ENV_POSTGRES_PORT: 5432
          ENV_POSTGRES_DB: mydatabase
          ENV_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          ENV_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Start Docker Compose services
        run: |
          docker-compose up --build -d
          docker-compose ps
  
      - name: Run tests
        id: test
        run: docker-compose run backend go test -v ./tests/...
      
      - name: Stop Docker Compose services
        run: docker-compose down

  deploy-docker:
    name: Deploy Docker
    needs: build-and-test
    environment: dev
    runs-on: ubuntu-latest
    
    steps:
      - name: check out code
        uses: actions/checkout@v2

      - name: Create .env file
        uses: ozaytsev86/create-env-file@v1
        with:
          ENV_POSTGRES_HOST: postgresdb
          ENV_POSTGRES_PORT: 5432
          ENV_POSTGRES_DB: mydatabase
          ENV_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          ENV_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

      - name: Push docker image if integration test passes
        run: docker compose build && docker compose push
      
      - name: Stop Docker Compose services
        run: docker-compose down

  deploy-helm:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to DockerHub via Helm
        uses: central-x/helm-login-action@v1
        with:
          registry: registry-1.docker.io
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
      
      - name: Push Helm Chart
        uses: central-x/helm-push-action@v1
        with:
          repository: oci://registry-1.docker.io/${{ secrets.USERNAME }}
          chart: ./f2pool-chart